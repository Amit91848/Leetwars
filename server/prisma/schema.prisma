generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             Int      @id @default(autoincrement())
    username       String
    provider       String
    providerUserId String
    picture        String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    roomId      String?
    room        Room?        @relation(fields: [roomId], references: [id], onDelete: SetNull)
    RoomUser    RoomUser[]
    submissions Submission[]

    @@unique([provider, providerUserId])
}

model Room {
    id        String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    questionFilterKind       String
    questionFilterSelections String[]
    duration                 Int?

    questions   RoomQuestions[]
    users       User[]
    submissions Submission[]
    RoomUser    RoomUser[]
}

model RoomUser {
    roomId String
    room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int

    joinedAt DateTime @default(now())

    @@id([roomId, userId])
}

model Question {
    id         Int        @id
    title      String     @unique
    titleSlug  String     @unique
    difficulty Difficulty
    tags       String[]

    rooms       RoomQuestions[]
    submissions Submission[]
}

model RoomQuestions {
    roomId String
    room   Room   @relation(fields: [roomId], references: [id], onDelete: Cascade)

    questionId Int
    question   Question @relation(fields: [questionId], references: [id])

    @@id([roomId, questionId])
}

model Submission {
    id         String           @id @default(uuid())
    createdAt  DateTime         @default(now())
    updatedAt  DateTime         @updatedAt
    user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     Int
    question   Question         @relation(fields: [questionId], references: [id])
    questionId Int
    room       Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)
    roomId     String
    status     SubmissionStatus
    url        String

    @@unique([userId, questionId, roomId])
}

enum Difficulty {
    Easy
    Medium
    Hard
}

enum SubmissionStatus {
    Attempted
    Accepted
}
